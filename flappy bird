//Flappy Code
//snow background animation
PImage[] gif3;
int numberOfFrames3;
int j;


PImage snowman;
PImage backgroundPic;
    bird b = new bird();
    pillar[] p = new pillar[3];
    boolean end=false;
    boolean intro=true;
    int score=0;
    
    
    void setup(){

    //snow background animation
    numberOfFrames3 = 3;
    gif3 = new PImage[numberOfFrames3];
  
    int n = 0;
    while (n<numberOfFrames3){
      gif3[n] = loadImage("frame_" + n + "_delay-0.25s.gif");
      n=n+1;
    } 
  
      snowman = loadImage("SNOWMANFLY.png");
      backgroundPic = loadImage("SNOWMAN BACKGROUND.png");
      
      size(804,601);
      for(int i = 0;i<3;i++){
      p[i]=new pillar(i);
      }
    }
    
    
    void draw(){
 
      //snow background animation
      //image(gif3[j], 0, 0, width, height);
      //j = j+1;
      //if (j == numberOfFrames3) j = 0;
      background(backgroundPic);

  
     
      if(end){
      b.move();
      }
      b.drawBird();
      if(end){
      b.drag();
      }
      b.checkCollisions();
      for(int i = 0;i<3;i++){
      p[i].drawPillar();
      p[i].checkPosition();
      }
      
      fill(0,0,0); //opening and closing screen colors
      stroke(0,0,255); //stroke color of boxes from above^
      textSize(32); //text size of the, well text
     
      if(end){  //next 4 lines shows you yours score 
      rect(20,20,100,50);
      fill(255);
      text(score,30,58);
      
      }else{
      rect(140,100,250,50);//location of "flappy bird" box
      rect(140,200,200,50);//locaiton of "click to play" box
      fill(255,255,255);//text color
      
      if(intro){
        text("Flying Snowman",155,140); //text
        text("Click to Play",155,240); //text
        
      }else{
      text("Game over!",170,140); //text
      text("Score:",180,240); //text
      text(score,280,240); //display final score

      }
      }
    }
    class bird{
      float xPos,yPos,ySpeed;
    bird(){
    xPos = 350;//starting x position when program is run
    yPos = 400;//starting y position when program is run
    }
    void drawBird(){
      stroke(0,60,100); //color of walls
      strokeWeight(10); //thickness of walls
      image(snowman, xPos,yPos,20,20); //snowman sprite
    }
    void jump(){
     ySpeed=-10; //how high snowman jumps each click (smaller number higher jump)
    }
    void drag(){
     ySpeed+=.5; //how strong gravity pulls you down (higher number stronger gravity)
    }
    void move(){
     yPos+=ySpeed; //updates yPos by adding on speed
     for(int i = 0;i<3;i++){
      p[i].xPos-=3;
     }
    }
    void checkCollisions(){
     if(yPos>800){ //lose game if you go too low
      end=false;
     }
    for(int i = 0;i<3;i++){
    if((xPos<p[i].xPos+10&&xPos>p[i].xPos-10)&&(yPos<p[i].opening-100||yPos>p[i].opening+100)){
     end=false; 
    }
    }
    } 
    }
    class pillar{
      float xPos, opening;
      boolean cashed = false;
     pillar(int i){
      xPos = 450+(i*200);
      opening = random(600)+100;
     }
     void drawPillar(){
       line(xPos,0,xPos,opening-100);  
       line(xPos,opening+100,xPos,800);
     }
     void checkPosition(){
      if(xPos<0){
       xPos+=(200*3);
       opening = random(600)+100;
       cashed=false;
      } 
      if(xPos<250&&cashed==false){
       cashed=true;
       score++; 
      }
     }

    }
    void reset(){
     end=true;
     score=0;
     b.yPos=400;

     for(int i = 0;i<3;i++){
      p[i].xPos+=550;
      p[i].cashed = false;
     }
    }
    void mousePressed(){
     b.jump();
     intro=false;
     if(end==false){
       reset();
     }
    }
    void keyPressed(){
     b.jump(); 
     intro=false;
     if(end==false){
       reset();
     }
    }
